<?php
/*
 * MotaWord
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 01/21/2016
 */

namespace MotaWord\Controllers;

use MotaWord\APIException;
use MotaWord\APIHelper;
use MotaWord\Configuration;
use Unirest\Unirest;
use Unirest\File;
class GlossaryController {
    /**
     * Get a list of glossaries
     * @param  int     $projectId     Required parameter: Project ID
     * @return mixed response from the API call*/
    public function getGlossaries (
                $projectId) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/projects/{projectId}/glossaries';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'projectId' => $projectId,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken)
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 404) {
            throw new APIException('ProjectNotFound', 404, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * Upload a new glossary
     * @param  string     $glossary     Required parameter
     * @param  int        $projectId      Required parameter: Project ID
     * @return mixed response from the API call*/
    public function createGlossary (
                $projectId,
                $glossary
                )
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/projects/{projectId}/glossaries';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'projectId'  => $projectId,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken)
        );

        //prepare parameters
        $parameters = array (
            "glossaries[]"     => File::add($glossary)
        );

        //prepare API request
        $request = Unirest::post($queryUrl, $headers, $parameters);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new APIException('FileTooLarge', 400, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('ProjectNotFound', 404, $response->body);
        }

        else if ($response->code == 405) {
            throw new APIException('UnsupportedGlossaryFormat', 405, $response->body);
        }

        else if ($response->code == 406) {
            throw new APIException('ProjectAlreadyHasGlossary', 406, $response->body);
        }

        else if ($response->code == 409) {
            throw new APIException('ProjectAlreadyStarted', 409, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * Get single glossary
     * @param  int     $glossaryId     Required parameter: Glossary ID
     * @param  int     $projectId      Required parameter: Project ID
     * @return mixed response from the API call*/
    public function getGlossary (
                $projectId,
                $glossaryId
                )
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/projects/{projectId}/glossaries/{glossaryId}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'glossaryId' => $glossaryId,
            'projectId'  => $projectId,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken)
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 404) {
            throw new APIException('GlossaryNotFound', 404, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * Update the glossary. File name and contents will replaced with the new one.
     * @param  string     $glossaries     Required parameter: Single file data. The name is plural to provide a consistent naming convention.
     * @param  int        $glossaryId     Required parameter: Glossary ID
     * @param  int        $projectId      Required parameter: Project ID
     * @return mixed response from the API call*/
    public function updateGlossary (
                $projectId,
                $glossaryId,
                $glossary
                )
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/projects/{projectId}/glossaries/{glossaryId}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'glossaryId' => $glossaryId,
            'projectId'  => $projectId,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken)
        );

        //prepare parameters
        $parameters = array (
            "glossaries"     => File::add($glossary)
        );

        //prepare API request
        $request = Unirest::put($queryUrl, $headers, $parameters);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new APIException('FileTooLarge', 400, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('GlossaryNotFound', 404, $response->body);
        }

        else if ($response->code == 405) {
            throw new APIException('UnsupportedGlossaryFormat', 405, $response->body);
        }

        else if ($response->code == 409) {
            throw new APIException('ProjectAlreadyStarted', 409, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * Delete the glossary
     * @param  int     $glossaryId     Required parameter: Glossary ID
     * @param  int     $projectId      Required parameter: Project ID
     * @return mixed response from the API call*/
    public function deleteGlossary (
                $projectId,
                $glossaryId
                )
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/projects/{projectId}/glossaries/{glossaryId}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'glossaryId' => $glossaryId,
            'projectId'  => $projectId,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken)
        );

        //prepare API request
        $request = Unirest::delete($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 404) {
            throw new APIException('GlossaryNotFound', 404, $response->body);
        }

        else if ($response->code == 409) {
            throw new APIException('ProjectAlreadyStarted', 409, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * Download a glossary
     * @param  int     $glossaryId     Required parameter: Glossary ID
     * @param  int     $projectId      Required parameter: Project ID
     * @return string response from the API call*/
    public function downloadGlossary (
                $projectId,
                $glossaryId
                )
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/projects/{projectId}/glossaries/{glossaryId}/download';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'glossaryId' => $glossaryId,
            'projectId'  => $projectId,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken)
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 404) {
            throw new APIException('GlossaryNotFound', 404, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
}