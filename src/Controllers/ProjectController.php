<?php
/*
 * MotaWord
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 01/21/2016
 */

namespace MotaWord\Controllers;

use MotaWord\APIException;
use MotaWord\APIHelper;
use MotaWord\Configuration;
use Unirest\Unirest;
use Unirest\File;
class ProjectController {
    /**
     * Update project language pairs
     * @param  string     $callbackUrl            Required parameter: Optional. If you provide a callback URL, we will send POST callbacks when the status of the current project is changed. Possible status changes are, 'translated', 'proofread', 'completed'.
     * @param  array      $custom                 Required parameter: Optional. This is a consistent custom data parameter that will be given to you in the response across every request of this project model. Values should be provided like this, custom[my_key] = my_value. If you previously provided one, it will be replaced.
     * @param  int        $id                     Required parameter: Project ID
     * @param  string     $sourceLanguage         Required parameter: TODO: type description here
     * @param  array      $targetLanguages        Required parameter: TODO: type description here
     * @return mixed response from the API call*/
    public function updateProject (
                $id,
                $sourceLanguage = null,
                $targetLanguages = null,
                $callbackUrl = null,
                $custom = []
                )
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/projects/{id}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'id'                 => $id,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'       => 'APIMATIC 2.0',
            'Accept'           => 'application/json',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken)
        );

        //prepare parameters
        $parameters = array (
            'callback_url'       => $callbackUrl,
            'custom'           => array_values($custom),
            'source_language'    => $sourceLanguage,
            'target_languages[]' => array_values($targetLanguages)
        );

        //prepare API request
        $request = Unirest::put($queryUrl, $headers, $parameters);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 404) {
            throw new APIException('ProjectNotFound', 404, $response->body);
        }

        else if ($response->code == 406) {
            throw new APIException('UnsupportedLanguage', 406, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * Get a list of your projects
     * @param  int     $page         Required parameter: Example: 1
     * @param  int     $perPage      Required parameter: Example: 10
     * @return mixed response from the API call*/
    public function getProjects (
                $page = 1,
                $perPage = 10)
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/projects';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($queryBuilder, array (
            'page'     => $page,
            'per_page' => $perPage,
        ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken)
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * Create a new project
     * @param  string     $callbackUrl            Required parameter: Optional. If you provide a callback URL, we will send POST callbacks when the status of the current project is changed. Possible status changes are, 'translated', 'proofread', 'completed'.
     * @param  array      $custom                 Required parameter: Optional. This is a consistent custom data parameter that will be given to you in the response across every request of this project model. Values should be provided like this, custom[my_key] = my_value.
     * @param  string     $document              Required parameter: Optional. You can add as many files as you want in documents[] parameter. Or you add your documents later in separate calls.
     * @param  string     $glossary             Required parameter: Optional. Only one glossary is supported at the moment.
     * @param  string     $sourceLanguage         Required parameter: TODO: type description here
     * @param  string     $styleguide            Required parameter: Optional. You can add as many files as you want in styleguides[] parameter. Or you add your style guides later in separate calls.
     * @param  array      $targetLanguages        Required parameter: TODO: type description here
     * @return mixed response from the API call*/
    public function createProject (
                $sourceLanguage,
                $targetLanguages,
                $callbackUrl = null,
                $custom = [],
                $document = null,
                $glossary = null,
                $styleguide = null
                )
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/projects';

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'       => 'APIMATIC 2.0',
            'Accept'           => 'application/json',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken)
        );

        //prepare parameters
        $parameters = array (
            'source_language'    => $sourceLanguage,
            'target_languages' => array_values($targetLanguages),
            'callback_url'       => $callbackUrl,
            'custom'           => array_values($custom)
        );

        if($document) {
            $parameters['documents[]'] = File::add($document);
        }

        if($glossary) {
            $parameters['glossaries[]'] = File::add($glossary);
        }

        if($styleguide) {
            $parameters['styleguides[]'] = File::add($styleguide);
        }

        //prepare API request
        $request = Unirest::post($queryUrl, $headers, $parameters);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new APIException('FileTooLarge FileTooSmall FileWasAlreadyUploaded', 400, $response->body);
        }

        else if ($response->code == 405) {
            throw new APIException('UnsupportedDocumentFormat UnsupportedStyleGuideFormat UnsupportedGlossaryFormat', 405, $response->body);
        }

        else if ($response->code == 406) {
            throw new APIException('UnsupportedLanguage TooManyGlossaries ProjectAlreadyHasGlossary', 406, $response->body);
        }

        else if ($response->code == 500) {
            throw new APIException('ProjectInsertFailed', 500, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * Get single project
     * @param  int     $id     Required parameter: Project ID
     * @return mixed response from the API call*/
    public function getProject (
                $id) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/projects/{id}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'id' => $id,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken)
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 404) {
            throw new APIException('ProjectNotFound', 404, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * TODO: type endpoint description here
     * @param  string                $budgetCode         Required parameter: Optional with corporate accounts. Not available for others.
     * @param  int                   $id                 Required parameter: Project ID
     * @param  string                $paymentCode        Required parameter: Optional. According to your corporate account configuration, this may be required.
     * @param  PaymentMethodEnum     $paymentMethod      Required parameter: Optional. Determines which method to use for payment. Options are 'corporate', 'client'.
     * @return mixed response from the API call*/
    public function launchProject (
                $id,
                $paymentMethod = null,
                $paymentCode = null,
                $budgetCode = null
                )
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/projects/{id}/launch';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'id'             => $id,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken)
        );

        //prepare parameters
        $parameters = array (
            'budget_code'    => $budgetCode,
            'payment_code'   => $paymentCode,
            'payment_method' => (null != $paymentMethod) ? $paymentMethod : null
        );

        //prepare API request
        $request = Unirest::post($queryUrl, $headers, $parameters);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new APIException('MissingPaymentCode MissingCorporateAccount MissingPaymentMethod', 400, $response->body);
        }

        else if ($response->code == 401) {
            throw new APIException('CorporateAccountNotAllowedForApiPayment ApiClientMissingPaymentInformation', 401, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('ProjectNotFound', 404, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * Get the progress of an already launched project.
     * @param  int     $id     Required parameter: Project ID
     * @return mixed response from the API call*/
    public function getProgress (
                $id) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/projects/{id}/progress';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'id' => $id,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken)
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 402) {
            throw new APIException('ProjectNotLaunchedYet', 402, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('ProjectNotFound', 404, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * Package the translation project, make it ready to be downloaded.
     * @param  int        $async        Required parameter: If you want to package and download the translation synchronously, mark this parameter as '0'. It will package the translation and then return the packaged file in the response, identical to /download call after an asynchronous /package call.
     * @param  int        $id           Required parameter: Project ID
     * @param  string     $language     Required parameter: Optional language code. If you need, you can package the translation of only a specific language.
     * @return string response from the API call*/
    public function createPackage (
                $id,
                $language = null,
                $async = 1
                )
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/projects/{id}/package/{language}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'id'       => $id,
            'language' => $language,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($queryBuilder, array (
            'async'    => $async,
        ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken)
        );

        //prepare API request
        $request = Unirest::post($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 402) {
            throw new APIException('ProjectNotLaunchedYet', 402, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('TranslationPackageNotFound', 404, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * This request will tell you the current progress of the translation packaging. You will use the 'key' provided by the /package call.
     * @param  int        $id      Required parameter: Project ID
     * @param  string     $key     Required parameter: This is the package tracking key provided in the response of a /package call.
     * @return mixed response from the API call*/
    public function trackPackaging (
                $id,
                $key) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/projects/{id}/package/check';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'id'  => $id,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($queryBuilder, array (
            'key' => $key,
        ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken)
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 402) {
            throw new APIException('ProjectNotLaunchedYet', 402, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('PackagingStatusMissing', 404, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * Download the latest translation package. If a language is provided, only the translation package of that language is returned. You must have given a /package call beforehand and wait until the packaging status is 'completed'.
     * @param  int        $id           Required parameter: Project ID
     * @param  string     $language     Required parameter: Optional language code. If you need, you can download the translation of only a specific language.
     * @return string response from the API call*/
    public function download (
                $id,
                $language = null)
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/projects/{id}/download/{language}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'id'       => $id,
            'language' => $language,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken)
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 402) {
            throw new APIException('ProjectNotLaunchedYet', 402, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('TranslationPackageNotFound', 404, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
}