<?php
/*
 * MotaWord
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 01/21/2016
 */

namespace MotaWord;

use InvalidArgumentException;
use OAuthException;
use Unirest\Unirest;

class APIHelper {
    /**
    * Replaces template parameters in the given url
    * @param	string	$queryBuilder    The query string builder to replace the template parameters
    * @param	array	$parameters	The parameters to replace in the url
    * @return	void */
    public static function appendUrlWithTemplateParameters(&$queryBuilder, $parameters)
    {
        //perform parameter validation
        if (is_null($queryBuilder) || !is_string($queryBuilder)) {
            throw new InvalidArgumentException('Given value for parameter "queryBuilder" is invalid.');
        }
        if (is_null($parameters)) {
            return;
        }
        //iterate and append parameters
        foreach ($parameters as $key => $value) {
            $replaceValue = '';

            //load parameter value
            if (is_null($value)) {
                $replaceValue = '';
            } elseif (is_array($value)) {
                $replaceValue = implode("/", $value);
            } else {
                $replaceValue = strval($value);
            }

            //find the template parameter and replace it with its value
            $queryBuilder = str_replace('{' . strval($key) . '}', $replaceValue, $queryBuilder);
        }

        if(substr($queryBuilder, -1, 1) === '/') {
            $queryBuilder = substr($queryBuilder, 0, -1);
        }
    }

    /**
    * Appends the given set of parameters to the given query string
    * @param	string	$queryBuilder	The query url string to append the parameters
    * @param	array	$parameters	The parameters to append
    * @return	void */
    public static function appendUrlWithQueryParameters(&$queryBuilder, $parameters)
    {
        //perform parameter validation
        if (is_null($queryBuilder) || !is_string($queryBuilder)) {
            throw new InvalidArgumentException('Given value for parameter "queryBuilder" is invalid.');
        }
        if (is_null($parameters)) {
            return;
        }
        //does the query string already has parameters
        $hasParams = (strrpos($queryBuilder, '?') > 0);

        //iterate and append parameters
        foreach ($parameters as $key => $value) {
            //ignore null values
            if (is_null($value)) {
                continue;
            }

            //if already has parameters, use the &amp; to append new parameters
            $queryBuilder = $queryBuilder . (($hasParams) ? '&' : '?');

            //indicate that now the query has some params
            $hasParams = true;

            if(is_array($value)) {
                $queryBuilder = $queryBuilder . urldecode(http_build_query(array($key => $value)));
            } else {
                $queryBuilder = $queryBuilder . $key . '=' . $value;
            }
        }
    }

    /**
    * Validates and processes the given Url
    * @param    string	$url The given Url to process
    * @return   string	Pre-processed Url as string */
    public static function cleanUrl($url)
    {
        //perform parameter validation
        if(is_null($url) || !is_string($url)) {
            throw new InvalidArgumentException('Invalid Url.');
        }
        //ensure that the urls are absolute
        $matchCount = preg_match("#^(https?://[^/]+)#", $url, $matches);
        if ($matchCount == 0) {
            throw new InvalidArgumentException('Invalid Url format.');
        }
        //get the http protocol match
        $protocol = $matches[1];

        //remove redundant forward slashes
        $query = substr($url, strlen($protocol));
        $query = preg_replace("#//+#", "/", $query);

        //return process url
        return $protocol.$query;
    }

    public static function generateAccessToken()
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;

        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/token';

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'Authorization' => sprintf('Basic %1$s', base64_encode(Configuration::$clientID.':'.Configuration::$clientSecret)),
        );

        //prepare parameters
        $parameters = array (
            'grant_type'    => 'client_credentials'
        );

        //prepare API request
        $request = Unirest::post($queryUrl, $headers, $parameters);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 500) {
            throw new APIException('Authentication error', 500, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        if(isset($response->body->error)) {
            throw new APIException($response->body->error->code, $response->body->error->http_code, $response->body->error->message);
        }

        if(!isset($response->body->access_token)) {
            throw new OAuthException('Access token is missing.');
        }

        Configuration::$oAuthAccessToken = $response->body->access_token;

        return $response->body->access_token;
    }
}